
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
}

provider "aws" {
  region = "us-east-2"
}


resource "aws_vpc" "MyVPC" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "My-VPC"
  }
}

resource "aws_internet_gateway" "MyIGW" {
  vpc_id = aws_vpc.MyVPC.id
  tags = {
    Name = "My-IGW"
  }
}

resource "aws_route_table" "MyPulicRT" {
  vpc_id = aws_vpc.MyVPC.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.MyIGW.id
  }

  tags = {
    Name = "My-Public-RT"
  }
}

resource "aws_subnet" "MySubnet1" {
  vpc_id            = aws_vpc.MyVPC.id
  cidr_block        = "10.0.0.0/24"
  availability_zone = "us-east-2a"

  tags = {
    Name = "My-Public-SN-1"
  }
}

resource "aws_route_table_association" "MyPublicSNRouteTableAssociation" {
  subnet_id      = aws_subnet.MySubnet1.id
  route_table_id = aws_route_table.MyPulicRT.id
}

resource "aws_subnet" "MySubnet2" {
  vpc_id            = aws_vpc.MyVPC.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-2b"

  tags = {
    Name = "My-Public-SN-2"
  }
}

resource "aws_route_table_association" "MyPublicSNRouteTableAssociation2" {
  subnet_id      = aws_subnet.MySubnet2.id
  route_table_id = aws_route_table.MyPulicRT.id
}

resource "aws_security_group" "WEBSG" {
  name        = "WEBSG"
  description = "Allow HTTP(80/tcp, 8080/tcp), SSH(22/tcp)"
  vpc_id      = aws_vpc.MyVPC.id

  ingress {
    description = "Allow HTTP(80/tcp)"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow HTTP(8080/tcp)"
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow SSH(80/tcp)"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "WEBSG"
  }
}

resource "aws_instance" "MyEC21" {
  ami                         = "ami-083eed19fc801d7a4"
  instance_type               = "t2.micro"
  associate_public_ip_address = true
  subnet_id                   = aws_subnet.MySubnet1.id
  security_groups             = [aws_security_group.WEBSG.id]
  user_data                   = <<-EOF
   #!/bin/bash
    exec > /var/log/web.log 2>&1
    echo "[START]"
    echo "[1]"
    hostname EC2-1
    echo "[2]"
    yum install httpd -y && service httpd start
    echo "[3]"
    chkconfig httpd on
    echo "[4]"
    echo "<h1>CloudNet@ EC2-1 Web Server</h1>" > /var/www/html/index.html
    echo "[END]"  
  EOF
  user_data_replace_on_change = true
  tags = {
    Name = "EC2-1"
  }
}

resource "aws_instance" "MyEC22" {
  ami                         = "ami-083eed19fc801d7a4"
  instance_type               = "t2.micro"
  associate_public_ip_address = true
  subnet_id                   = aws_subnet.MySubnet2.id
  security_groups             = [aws_security_group.WEBSG.id]
  user_data                   = <<-EOF
   #!/bin/bash
    exec > /var/log/web.log 2>&1
    echo "[START]"
    echo "[1]"
    hostname EC2-2
    echo "[2]"
    yum install httpd -y && service httpd start
    echo "[3]"
    chkconfig httpd on
    echo "[4]"
    echo "<h1>CloudNet@ EC2-2 Web Server</h1>" > /var/www/html/index.html
    echo "[END]"  
  EOF
  user_data_replace_on_change = true
  tags = {
    Name = "EC2-2"
  }
}

resource "aws_eip" "MyEIP1" {
  instance = aws_instance.MyEC21.id
  vpc      = true
}

resource "aws_eip" "MyEIP2" {
  instance = aws_instance.MyEC22.id
  vpc      = true
}

resource "aws_lb_target_group" "ALBTargetGroup" {
  name     = "MY-ALB-TG"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.MyVPC.id

}

resource "aws_lb_target_group_attachment" "TGAttachement" {
  target_group_arn = aws_lb_target_group.ALBTargetGroup.arn
  target_id        = aws_instance.MyEC21.id
  port             = 80
}

resource "aws_lb_target_group_attachment" "TGAttachement2" {
  target_group_arn = aws_lb_target_group.ALBTargetGroup.arn
  target_id        = aws_instance.MyEC22.id
  port             = 80
}

resource "aws_lb" "ApplicationLoadBalancer" {
  name               = "MY-ALB"
  load_balancer_type = "application"
  security_groups    = [aws_security_group.WEBSG.id]
  subnets            = [aws_subnet.MySubnet1.id, aws_subnet.MySubnet2.id]
}

resource "aws_lb_listener" "ALBListener" {
  load_balancer_arn = aws_lb.ApplicationLoadBalancer.arn
  port              = "80"
  protocol          = "HTTP"
  default_action {
    type = "fixed-response"

    fixed_response {
      content_type = "text/plain"
      message_body = "Fixed response content"
      status_code  = "200"
    }
  }
}

resource "aws_lb_listener_rule" "MyListnerRule" {
  listener_arn = aws_lb_listener.ALBListener.arn
  priority     = 100

  condition {
    host_header {
      values = ["*"]
    }
  }
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.ALBTargetGroup.arn

  }
}